===================================================================================

Repast HPC Development- Change Log

Changes sinces Repast HPC 2.2.0 (30 September 2016)

New features include:

ValueLayerNDSU: N-Dimensional Value Layer that performs summation across processes, akin to
an MPI 'gather' operation. Agents on local processes can add values to the value layer 
even outside the local process boundaries. The 'flowback' method pulls all the added values 
from the adjacent processes and sums them on the local process. This represents an exception to the 
general Repast HPC rule that changes made to non-local entities are not propagated to local processes. 
However, the change is made to the non-local region of a value layer, not a non-local agent. 
Care should be exercised to ensure that these non-local regions are not assumed to be current until 
the flowback method is called and the results synchronized.

WeightedRandomSelector.h: Helper class for creating random selection by weighted lists of options.

Other Changes:

* Remove variables declared but never used in ValueLayerND.h; revise order of initialization in 
RelativeLocation.cpp

* BUG FIX: Some compilers cause an error for a comparison of a pointer with "> 0"; a line in SharedBaseGrid.h 
was changed to adjust for this.

* BUG FIX: Removed 'break' from loop in Graph.h that caused agents to be missed during cross-process exchanges.

* Update module.mk for makefile compilation

* Misc. other bug fixes.


Changes since Repast HPC 2.1 (8 May 2015):

New features include:

N-Dimensional Spaces
	Shared discrete and continuous spaces can now be created in N-Dimensions.
  This allows 3-D simulations (and higher). All synchronization routines
	operate as in previous releases.

N-Dimensional Value Layers
	Value layers that store basic data (not agents) can now be created; indexing
  is identical to spatial coordinate systems. Synchronization uses fundamental
   MPI. A special version allows synchronous updating by providing two data
	 banks.

Diffusion
	A new DiffusionLayerND class allows simple implementation of diffusion
  algoriths through N-Dimensional Value Layers. Users provide custom diffusion
  algorithms, while Repast HPC classes manage processing cells and
  synchronization across processes of results

Properties Writing
	Simulation can now write properties in a format that can be read as a
  properties file; useful for re-running runs.



Other Changes:

Bug Fix: Config Lexer omits rank when called during RepastProcess::init.
Fixes a problem with error reporting during init.

Removed Swap X/Y from CartTopology: Removed unneeded swap of x and y dimensions

Bug Fix: Logger delete should have been delete[] (logger.cpp)

Bug Fix: Properties File Builder delete should have been delete[]
(Properties.cpp)

Bug Fix: RepastProcess.cpp synchronization routines, delete should have
 been delete[] (RepastProcess.cpp)

Bug Fix: Logger in repast namespace (Logger.h, Logger.cpp)

================================================================

7 March 2012: RemoveMeaninglessConsts

Modified AgentStatus.h, Point.h, and Observer.h to remove 'const' qualifiers
on elemental return types. The Intel compiler issues a warning about this;
a const qualifier on an elemental return type such as:

const int foo();

is actually meaningless. This also applies to enumerated types.

8 March 2012: MakeGlobalSeedDefault

The implementation of random number seed initialization in release 1.0.1 was
counterintuitive. This revision changes the way that the options of
global.random.seed, random.seed, and the presence or absence of a communicator
in the initializeRandom function call are translated into a random number
seed.

The framework provides for two basic use cases: in one, all processes use the
identical random number seed; in the other, a single seed is given and used
by process 0, but each other process receives a different seed that is derived
from the original.

Crosscutting these two alternatives is the source of the seed: it can be
specified explicitly or generated from system time.

The two property values, global.random.seed and random.seed, can be in one
of three states: absent/omitted, a numeric value, or 'AUTO'. 'AUTO' means
automatically generated from system time. However, if the property is omitted,
the default is also to generate the seed from system time. The result is that
some combinations of the property values are redundant.

The initializeRandom function can be called with or without a communicator. This
plus the three possible states for the properties gives 18 combinations; however,
a value for 'global.random.seed' always takes precedence over 'random.seed'.
(Note that it is assumed that all processes are working from identical
properties collections.)
The effective combinations and their outcomes are:


No Communicator:
   global.random.seed = NUMERIC: All processes uses this seed
   global.random.seed = AUTO: FAILS*- Communicator required

   global.random.seed omitted:
       random.seed = NUMERIC: All processes use this seed
       random.seed = AUTO: All processes use system time (may vary)
       random.seed = omitted: All processes use system time (may vary)

Using Communicator:
   global.random.seed = NUMERIC: Each process uses this seed**
   global.random.seed = AUTO: A seed is generated from system time on
                                 process 0 and broadcast to all other
                                 processes

   global.random.seed = omitted:
      random.seed = NUMERIC: This seed is used on process 0, and all
                                 other processes use seeds that are
                                 derived from this but different from it
      random.seed = AUTO: A seed from system time is used on process 0,
                                 and all other processes use seeds that
                                 are derived from this but different from it
      random.seed = omitted: A seed is generated from system time on
                                 process 0, and all other processes use seeds
                                 that are derived from this but different from
                                 it

* The failure in the case of global.random.seed = AUTO when no communicator is
provided may seem counterintuitive; one might consider that in this case each
process would simply use system time. But system time may not be the same
on all processes, and the use of 'global.random.seed' implies that all processes
should be identical.

** Note that if global.random.seed = NUMERIC, no actual transmission across
processes takes place, even if a communicator is provided. This is allowed
by the assumption that all processes work from identical properties collections.

Note that the effective default cases are:

If no communicator is used, and no value is specified for global.random.seed
nor for random.seed, each process will use system time.

If a communicator is used, and no value is specified for global.random.seed
nor for random.seed, all processes will have different but reproducible
random number generation streams.

Finally, note that the properties file is now changed by the call to
initializeRandom: if the actual property specification was 'AUTO', this
is overwritten with actual value that was used. This is specific to
each processor; records should be kept accordingly if runs are to be reproduced.

(Revised 12 March 2012: debug code deleted)

12 March 2012: Shared Pointer Edges

This feature addresses a known memory leak in code related to networks.
The leak occurs when an edge is added to a network that already contains
an edge linking the same two vertices, and no other pointer to the original
edge exists other than that stored by the network.

Vertices store pointers to edges. When a new edge is added that duplicates
an existing edge, pointer to the original edge is dropped.

Technically this is not necessarily a RepastHPC memory leak: it is possible
that the user has maintained a separate pointer. However, this is unlikely,
and the semantics of the Repast HPC code provide no indication that the
user should do so. (An example can be found in our own demo code: the
Rumor model exhibited this leak.)

Several solutions are possible. For example, adding a duplicate edge could be
trapped as an error. Alternatively, adding a duplicate edge could be
interpreted within the semantics of a simulation as adding the two edges
together (for example, weight + weight). Or the graph could be allowed to
have multiple edges between the same two vertices- a 'multigraph'. But
the cleanest solution for now is to replace the pointers used with
instances of boost:shared_ptr. These automatically track when they are
'orphaned'; the user may or may not maintain separate pointers, but this is
irrelevant to the Repast HPC code.

12 March 2012: Added 'delete rumorModel' to Rumor Model run code.

Earlier released version failed to delete the instance of the rumor model object
from the heap, leading to a potential memory leak.

12 March 2012: Refactor 'RelogoAgent' to avoid hiding 'heading' function

Refactor RelogoAgent; omit 'heading()' because patches don't have headings.

A proposed alternative to eliminate the 'virtual override' error that
was occurring on the Intel compiler. The function:

     RelogoAgent::heading(){ return 0; }

is, clearly, meaningless. RelogoAgent is a parent class for AbstractRelogoAgent,
which is parent to both Patch and Turtle classes. Patches do not have
headings, so the heading() function could be pushed down the hierarchy
to the 'Turtle' class. This not only makes sense, but would eliminate the
error that the Intel compiler was giving (in which the Turtle's version
of the function was hiding the parent class's).

The obstacle was the 'hatch' method of the Observer class. The Observer class
is aware of RelogoAgent, but not of Turtle. The 'hatch' method must make
a copy of the object being hatched. In the original implementation, this
included a call to heading() (which did exist for RelogoAgent), and also
a call to heading(float) (which does not exist for RelogoAgent). The presumption
is that only Turtles are actually hatched.

The solution proposed here is to replace the explicit calls to heading() and
heading(float) in the Observer::hatch method with a single call to a new method:

    virtual void RelogoAgent::hatchCopy(){}

This does nothing at the RelogoAgent level, but can be extended in child classes
as needed. The Turtle class is modified to include this, and it currently sets
only the heading, but custom child classes could omit this or do more.

13 March 2012: Sync Agent Status dangling pointer

The RepastProcess::syncAgentStatus function contained the following curious
line:

for (int i = 0, n = contents.size(); i < n; i++) {
  std::vector<Content>* content = contents[i];
  for (typename std::vector<Content>::const_iterator iter = content->begin(); iter != content->end(); ++iter) {
    T* out = creator.createAgent(*iter);
    out->getId().currentRank(rank_);
    if (!context.addAgent(out)) {
      // already contained the agent as an imported agent so update the existing
      // agent's id;
      T* agent = context.getAgent(out->getId());
      agent->getId().currentRank(rank_);
      //std::cout << rank_ << " : agent already added " << out->getId() << std::endl;
      delete out;
    } else {
      context.incrementProjRefCount(out->getId());
    }
    AgentId id = out->getId();
  }
  delete content;
}

The line "AgentId id = out->getId();" is both curious and spurious: the variable it
creates falls out of scope immediately, and the getId() method does not change the instance
on which it is called. Removing this line should have no effect, and testing supports this.

However, removing the line should prevent undefined behavior: in the case where the first
branch of the conditional is taken, 'out' should be deleted. Calling out->getId() is, in
fact, undefined. In most implementations it should be harmless: the values that are used to
create the AgentId are, perhaps, changed from what they were before, but no runtime error
should result. Nevertheless, there is a possibility that a crash could occur.

To prevent this, the line is removed.

===================================================================================
                 Repast HPC Version 1.0.1 Final Release Notes

===================================================================================
New Features
===================================================================================
Repast HPC

* Efficient Random Selection of Agents by User-Specified Criteria
* Cancellation of Agent Requests
* Command Line Arguments Supersede Properties Files/ Properties Outputs
* Compatibility with Most Recent versions of Boost
* Compatibility with Most Recent XL and GCC compilers

===================================================================================
Enhancements
===================================================================================
Repast HPC

* Sender/Receiver Management Uses MPI AllToAll
* Properties Files read only by process 0
* AgentRequests and Shared Network Functions now use MPI AllToAll
* Data set constructors automatically adjust suffix for duplicate filenames
* Random number generation now varies seed across processes (repeatably)
* Can be run in sub-communicator (does not rely on 'world')

ReLogo

* Setup method of Observer child class need no longer invoke parent explicitly

===================================================================================
Bug Fixes
===================================================================================
Repast HPC

* GetDisplacement now returns Displacement from P1 to P2 instead of P2 to P1
* Nonblocking sends now wait until status is complete
* "Importers" data structure now cleared after use
* Non-Toroidal Space no longer causes null pointer exception

ReLogo

* Create Networks using SimRunner/Properties File
* withMax function now corrected
* repast::BaseGrid::GetDisplacement fix also corrects multiple relogo functions
* Selection from agent sets by values chooses randomly from identical values

Rumor Model

* Replaced set<Node*> with explicit comparison operator, allowing Random Number
   Seed level reproducibility.
* Now can be used in subcommunicator

Zombies Demo

* Observer::setup signature corrected



***********************************************************************************
*                                 Details                                         *
***********************************************************************************


===================================================================================
RepastHPC
===================================================================================
* Efficient Random Selection of Agents by User-Specified Criteria

New functions of the Context and SharedContext classes allow the random
selection of sets of agents; the methods use optional arguments to provide the
following syntax:

  selectAgents  [count] (set | vector) [type] [filter] [remove = false [popSize]]

Where:

   count: the number of agents to be selected.
   (set | vector): either a set or a vector must be passed; this will be a
        std::set<Agent*> or a std::vector<Agent*>. If a vector is passed,
        the results will be shuffled before being returned. Whichever
        collection is used, if it is not empty then any agents already in the
        collection will not be selected from the population.
   type: an integer representing agent type (as per its AgentId); if included,
        only agents of this type will be selected
   filter: a user-defined struct that takes a boost pointer to an agent and
        returns 'true' or 'false' based on some criteria (see 'IsLocalAgent'
        for an example).
   remove: if this is set to 'true', the agents present in the set or vector
        passed will be removed from the set or vector that is returned. If false
        (the default), the set returned will contain all of the agents
        selected plus all of the agents that were originally in the set
   popSize: If a value is given, the routine assumes that the number of agents
        in the source population is known and need not be calculated again.
        Counting the number of agents in a given iterator is slow and should be
        avoided if possible.

For SharedContext, an additional parameter can be provided that indicates whether
only local or only non-local agents should be selected

===================================================================================
* Cancellation of Agent Requests

In previous releases, once an agent was requested, its information would be
exported to the requesting process until the end of the simulation. Now agent
requests can be cancelled, which will stop the agent's information being sent.

===================================================================================
* Command Line Arguments Supersede Properties Files/ Properties Outputs

Command line arguments in the form "Property=Value" can be passed to models and
supersede properties with the same key specified in the model's properties
file. This provides an easy way to store default values in the properties file
but easily perform runs using different values. Values in Properties objects
can now be written directly to logs or to separated value files.

===================================================================================
* Compatibility with Most Recent versions of Boost

Repast HPC has been run with Boost versions 1.46, 1.47 and 1.48

===================================================================================
* Compatibility with Most Recent XL and GCC compilers

An adjustment in the configure script now allows installation using the most
recent version of the gcc compiler. The compatibility with XL is unchanged.

===================================================================================
* Sender/Receiver Management Uses MPI AllToAll

The 'SRManager' class, previously defined in mpiio.h, is replaced. The function of
the class is to send integers from each process to each other process, indicating
the number of elements each process will request from each other process. The new
implementation uses MPI Alltoall, with a significant performance increase.

===================================================================================
* Properties Files read only by process 0

Users can optionally configure their models so that both the model 'Properties'
and 'Configuration' files are read only on process 0 and broadcast to the other
ranks. This avoids collisions among N processes trying to read a single file
simultaneously. This is optional because it occurs during initialization, often
before processes are synchronized, and so may not carry a performance benefit in
all contexts. However, at large scales, it is probably preferable.

===================================================================================
* AgentRequests and Shared Network Functions now use MPI AllToAll

Agent Requests and some functions of Shared Networks were previously processed
by sending all request through process 0, which then collated and
redistributed them. The new implementation executes the initial sort in parallel
on all origin processes, then uses MPI Alltoall to exchange the requests. This
carries a significant performance improvement.

===================================================================================
* Data set constructors automatically adjust suffix for duplicate filenames

In the previous release, a simulation run that attempted to create a data set
with the name of a pre-existing file would rename the existing file, and
mark it with a current time stamp. This led to the counterintuitive case where
simulations run previously had their data files re-named using newer timestamps.
The new implementation will not overwrite or change an existing file, but instead
will add a timestamp suffix to the name of the new file being created.

===================================================================================
* Random number generation now varies seed across processes (repeatably)

Repast HPC allows a simulation run to be replicated by providing the original
random number seed. However, When a RNS is provided to the previous implementation,
all processes initialized their random number generation engine using the same seed.
This led to a situation where all processes performing similar operations- such
as selecting sets of agents- would select essentially duplicate sets. The new
release uses the specified RNS on process 0 to generate seeds that are distributed
to the other processes.

===================================================================================
* Can be run in sub-communicator (does not rely on 'world')

Instances in the original code that referred to default global MPI communicator are
replaced; RepastProcess can be initialized with a communicator that is passed or
made available to all functions. This means that a job running on a large machine
can govern multiple, separate RepastHPC jobs, each running in its own communicator.

===================================================================================
* Setup method of Observer child class need no longer invoke parent explicitly

Previously the user was required to create a child class of 'Relogo::Observer'
and provide it with a'Setup' method; an additional requirement was that this
user-defined 'Setup' method would, as its first action, invoke the 'Setup' method
of the parent class. This has been refactored; the user-defined 'Setup'
method is now called internally after the parent class's method is automatically
invoked.

===================================================================================
* GetDisplacement now returns Displacement from P1 to P2 instead of P2 to P1

Although the method could have been correct either way, usage at other places
in the RepastHPC and Relogo code indicated that the correct result for this
function should be the displacement from P1 to P2, and not from P2 to P1. This
has been adjusted, with implications for other functions on which it depends
(see below).

===================================================================================
* Nonblocking sends now wait until status is complete

In pure MPI, a non-blocking send (one that allows code execution to continue even
before the communication is complete) requires that the buffer that contains the
information being sent be kept intact until the send is finished as indicated by
the appropriate status flag. In practice, implementations of MPI are allowed to
alter the strategy for the send in ways that might make this irrelevant- such as
by immediately copying the buffer or object to be sent. In the original RepastHPC
code there were multiple places where the buffer or object being sent was allowed
to fall out of scope before the status of the send was checked. In practice, no
error was ever caused by this, but to conform to the written specification, these
instances have been changed to protect the buffer until the send is confirmed
complete.

===================================================================================
* "Importers" data structure now cleared after use

In RepastProcess, a data structure used to specify data as part of exchanging
agents was never cleared, leading potentially to redundant data sends. This has
been fixed in the current release.

===================================================================================
* Non-Toroidal Space no longer causes null pointer exception

A search by one process for pointers to space elements representing spaces
manageed by neighboring processes caused a null pointer
exception when a process did not have neighbors in all directions; this was
never the case for toroidal spaces, but for non-toroidal spaces processes at the
boundaries would have no neighbors. The null pointer is now trapped.

===================================================================================
ReLogo
===================================================================================
* Create Networks using SimRunner/Properties File

The original release of Repast HPC omitted a way to specify that one or more
networks should be created for use in Relogo models. In the new release, entries
in the properties file can specify that one or more directed or undirected networks
should exist with the specified names.


===================================================================================
* withMax function now corrected

The original implementation worked correctly only for sets in which all values
were greater than zero; the new implementation corrects this.

===================================================================================
* repast::BaseGrid::GetDisplacement fix also corrects multiple relogo functions

Functions affected by the correction to BaseGrid::GetDisplacement include:

	moveTiedTurtles
		This is also is called by:
			 move
	towards(Point)
		This is called by:
			towards (RelogoAgent)
			towardsxy(double, double)
			moveTiedTurtles
			face(Turtle)
			face(Patch)
			facexy(double, double)

===================================================================================
* Selection from agent sets by values chooses randomly from identical values

Relogo's minNOf and maxXOf functions are intended to allow a user to specify
a way to retrieve a specific property from each of a set of agents and a way to
retrieve the N agents with the lowest or highest values of that property. The
original implementation performed a simple sort and returned the first N values
from the resulting list. However, in cases where 'ties' can occur, selection
from the valid candidates should be randomized (and integrated with the native
 random engine). An example would be a case in which N = 5 and the smallest
values retrieved are:  0, 0, 1, 2, 2, 2, 2, 2, 3 …; in this case, the two agents
with '0' and the one with '1' should be returned, but the choice among the
5 possible agents with '2' should be mathematically random. This is now
implemented.

===================================================================================
Rumor Model

* Replaced set<Node*> with explicit comparison operator, allowing Random Number
   Seed level reproducibility.

The basic data structure for the Rumor Model was a set of pointers to Node
objects. The std::set<Node*> object ordered nodes by value of the pointer, and
hence by address in memory where the node was created. This was not consistently
replicable. Added an explicit Node* comparison operator 'Node_Less', and created
std::set<Node*, NodeLess> that uses it; comparison is based on AgentId. There is
possibly a performance cost for this; compile using either with or without the
comparison struct to assess.

* Now can be used in subcommunicator

All references to boost::mpi::communicator default constructor (accessing
MPI_World) are replaced with calls to RepastProcess::instance()->getCommunicator(),
allowing model to use common communicator and be run in subcommunicator if needed.


===================================================================================
Zombies Demo

===================================================================================
* Observer::setup signature corrected

The signature of the setup method for the ZombieObserver class was incorrect; the
correct signature is: void ZombieObserver::setup(Properties& props), using
a reference for the properties object instead of an instance. Note that on many
systems this compiled and ran successfully; however, on the Intel compiler
it did not.
